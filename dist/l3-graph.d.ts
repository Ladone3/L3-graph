// Generated by dts-bundle v0.7.2
// Dependencies for this module:
//   ../../../react
//   ../../../three
//   ../../../webcola

declare module 'l3-graph' {
    export { L3Graph, L3GraphProps, GraphElements } from 'l3-graph/l3Graph/l3Graph';
    export { ViewOptions } from 'l3-graph/l3Graph/views/diagramView';
    export { Node } from 'l3-graph/l3Graph/models/node';
    export { Link } from 'l3-graph/l3Graph/models/link';
    export { NodeViewTemplate, LinkViewTemplate, L3Mesh, MeshObj, MeshPrimitive, THREE, DEFAULT_NODE_TEMPLATE, DEFAULT_NODE_TEMPLATE_PROVIDER, DEFAULT_LINK_TEMPLATE, DEFAULT_LINK_TEMPLATE_PROVIDER } from 'l3-graph/l3Graph/templates';
    export { ViewController } from 'l3-graph/l3Graph/controllers/viewController';
    export * from 'l3-graph/l3Graph/utils/subscribeable';
    export { applyForceLayout3d } from 'l3-graph/l3Graph/layout/layouts';
    export * from 'l3-graph/l3Graph/utils/colorUtils';
}

declare module 'l3-graph/l3Graph/l3Graph' {
    import * as React from 'react';
    import { ViewController, ViewControllersSet } from 'l3-graph/l3Graph/controllers/viewController';
    import { DiagramModel } from 'l3-graph/l3Graph/models/diagramModel';
    import { ViewOptions } from 'l3-graph/l3Graph/views/diagramView';
    import { Link } from 'l3-graph/l3Graph/models/link';
    import { Node } from 'l3-graph/l3Graph/models/node';
    import { Vector2D, Vector3D } from 'l3-graph/l3Graph/models/primitives';
    export interface GraphElements {
        nodes: Node[];
        links: Link[];
    }
    export interface L3GraphProps {
        graph: GraphElements;
        viewOptions?: ViewOptions;
        viewControllers?: ViewControllersSet;
        onComponentMount?: (graph: L3Graph) => void;
        onComponentUnmount?: (graph: L3Graph) => void;
    }
    export interface State {
        viewController?: ViewController;
    }
    export class L3Graph extends React.Component<L3GraphProps, State> {
        model: DiagramModel;
        constructor(props: L3GraphProps);
        componentWillUpdate(props: L3GraphProps): void;
        viewController: ViewController;
        componentDidMount(): void;
        componentWillUnmount(): void;
        clientPosTo3dPos(position: Vector2D, distanceFromScreen?: number): Vector3D;
        render(): JSX.Element;
    }
}

declare module 'l3-graph/l3Graph/views/diagramView' {
    import * as React from 'react';
    import * as THREE from 'three';
    import { Vector3D, Vector2D } from 'l3-graph/l3Graph/models/primitives';
    import { NodeTemplateProvider, LinkTemplateProvider } from 'l3-graph/l3Graph/templates';
    import { GraphView } from 'l3-graph/l3Graph/views/graphView';
    import { DiagramModel } from 'l3-graph/l3Graph/models/diagramModel';
    import { WidgetsView } from 'l3-graph/l3Graph/views/widgetsView';
    export interface ViewOptions {
        nodeTemplateProvider?: NodeTemplateProvider;
        linkTemplateProvider?: LinkTemplateProvider;
        simpleLinks?: boolean;
    }
    export interface DiagramViewProps {
        model: DiagramModel;
        onViewMount?: (view: DiagramView) => void;
        viewOptions?: ViewOptions;
    }
    export interface CameraState {
        position: Vector3D;
        focusDirection?: Vector3D;
    }
    export const DEFAULT_CAMERA_DIST = 100;
    export class DiagramView extends React.Component<DiagramViewProps> {
        graphView: GraphView;
        widgetsView: WidgetsView;
        camera: THREE.PerspectiveCamera;
        scene: THREE.Scene;
        meshHtmlContainer: HTMLElement;
        overlayHtmlContainer: HTMLElement;
        screenParameters: {
            WIDTH: number;
            HEIGHT: number;
            VIEW_ANGLE: number;
            ASPECT: number;
            NEAR: number;
            FAR: number;
        };
        constructor(props: DiagramViewProps);
        componentDidMount(): void;
        mouseTo3dPos(event: MouseEvent, distanceFromScreen?: number): Vector3D;
        clientPosTo3dPos(position: Vector2D, distanceFromScreen?: number): Vector3D;
        cameraState: CameraState;
        renderGraph(): void;
        render(): JSX.Element;
    }
}

declare module 'l3-graph/l3Graph/models/node' {
    import { Vector3D } from 'l3-graph/l3Graph/models/primitives';
    import { Subscribable } from 'l3-graph/l3Graph/utils/subscribeable';
    import { Link } from 'l3-graph/l3Graph/models/link';
    export const DEFAULT_NODE_TYPE_ID = "o3d-node";
    export const DEFAULT_NODE_SIZE: Vector3D;
    export interface NodeParameters<NodeContent> {
        id?: string;
        position: Vector3D;
        types?: string[];
        data?: NodeContent;
    }
    export interface NodeEvents {
        'change:position': Vector3D;
        'force-update': void;
        'remove': void;
    }
    export class Node<NodeContent = any> extends Subscribable<NodeEvents> {
        readonly id: string;
        incomingLinks: Map<string, Link>;
        outgoingLinks: Map<string, Link>;
        constructor(parameters: NodeParameters<NodeContent>);
        types: string[];
        data: NodeContent;
        position: Vector3D;
        forceUpdate(): void;
        remove(): void;
    }
}

declare module 'l3-graph/l3Graph/models/link' {
    import { Node } from 'l3-graph/l3Graph/models/node';
    import { Subscribable } from 'l3-graph/l3Graph/utils/subscribeable';
    export const DEFAULT_LINK_ID = "o3d-link";
    export interface LinkParameters {
        id?: string;
        sourceId: string;
        targetId: string;
        label: string;
        types?: string[];
    }
    export interface LinkEvents {
        'force-update': void;
        'remove': void;
    }
    export class Link extends Subscribable<LinkEvents> {
        readonly id: string;
        source: Node;
        target: Node;
        _sourceId: string;
        _targetId: string;
        constructor(parameters: LinkParameters);
        types: string[];
        label: string;
        forceUpdate(): void;
        remove(): void;
    }
}

declare module 'l3-graph/l3Graph/templates' {
    import * as React from 'react';
    import * as _THREE from 'three';
    export * from 'l3-graph/l3Graph/templates/defaultLinkTemplate';
    export * from 'l3-graph/l3Graph/templates/defaultNodeTemplate';
    export * from 'l3-graph/l3Graph/templates/defaultOverlay';
    export interface MeshObj {
        obj: string;
        scale?: number;
        colors?: (string | number)[];
    }
    export namespace THREE {
        type Object3D = any;
    }
    export interface MeshPrimitive {
        shape: 'cube' | 'sphere' | 'cone' | 'cylinder' | 'dodecahedron' | 'torus' | 'tetrahedron' | 'plane';
        color?: string;
    }
    export type L3Mesh = THREE.Object3D | MeshObj | MeshPrimitive;
    export function isMeshObj(mesh: L3Mesh): mesh is MeshObj;
    export function isObject3d(mesh: L3Mesh): mesh is _THREE.Object3D;
    export function isMeshPrimitive(mesh: L3Mesh): mesh is MeshPrimitive;
    export interface NodeViewTemplate<NodeContent = any> {
        overlay?: {
            get: (node: NodeContent) => React.ComponentClass<NodeContent>;
            context?: any;
        };
        mesh?: (data: NodeContent) => L3Mesh;
    }
    export type NodeTemplateProvider = (types: string[]) => NodeViewTemplate;
    export interface LinkViewTemplate {
        color: number | string;
        thickness?: number;
    }
    export type LinkTemplateProvider = (types: string[]) => LinkViewTemplate;
}

declare module 'l3-graph/l3Graph/controllers/viewController' {
    import { DiagramView } from 'l3-graph/l3Graph/views/diagramView';
    import { Vector3 } from 'three';
    export const ROTATION_DECREASE_SPEED = 300;
    export const CAMERA_STEP_SPEED = 20;
    export const ZERO_POSITION: Vector3;
    export const ZOOM_STEP_MULTIPLAYER = 1;
    export const KEY_ROTATION_DECREASE_SPEED = 10;
    export const LIMIT_OPACITY = 100;
    export interface ViewController {
        id: string;
        label: string;
        onKeyPressed: (event: Set<number>) => void;
        onMouseDown: (event: MouseEvent) => void;
        onMouseWheel: (event: MouseWheelEvent) => void;
        refreshCamera: () => void;
        focusOn: (element: Element) => void;
    }
    export type ViewControllersSet = ((view: DiagramView) => ViewController)[];
}

declare module 'l3-graph/l3Graph/utils/subscribeable' {
    export interface EventObject<Key = any, Events = any> {
        eventId: Key;
        data: Events;
    }
    export type EventCallback<Events = any, Key extends keyof Events = any> = (event: EventObject<Key, Events[Key]>) => void;
    export class Subscribable<Events> {
        on<Key extends keyof Events>(eventId: Key, callback: EventCallback<Events, Key>): void;
        onAny(callback: EventCallback): void;
        unsubscribe(callback: EventCallback): void;
        trigger<Key extends keyof Events>(eventId: Key, eventObject?: Events[Key]): void;
    }
    export default Subscribable;
}

declare module 'l3-graph/l3Graph/layout/layouts' {
    import * as cola from 'webcola';
    import { Link } from 'l3-graph/l3Graph/models/link';
    import { Node } from 'l3-graph/l3Graph/models/node';
    import { GraphModel } from 'l3-graph/l3Graph/models/graphModel';
    export const PREFFERED_LINK_LENGTH = 75;
    export interface LayoutNode {
        id?: string;
        x: number;
        y: number;
        width: number;
        height: number;
        originalNode: Node;
        bounds?: any;
        innerBounds?: any;
    }
    export interface LayoutLink {
        originalLink: Link;
        source: LayoutNode;
        target: LayoutNode;
    }
    export class LayoutNode3D extends cola.Node3D {
        node: Node;
        constructor(node: Node);
    }
    export class LayoutLink3D extends cola.Link3D {
        link: Link;
        constructor(link: Link, sourceIndex: number, targetIndex: number);
    }
    export interface LayoutLink {
        originalLink: Link;
        source: LayoutNode;
        target: LayoutNode;
    }
    export function whaterHoleLayout(params: {
        nodes: LayoutNode[];
        links: LayoutLink[];
    }): void;
    export function forceLayout(params: {
        iterations: number;
        nodes: LayoutNode[];
        links: LayoutLink[];
        preferredLinkLength: number;
    }): void;
    export function forceLayout3d(params: {
        iterations: number;
        nodes: cola.Node3D[];
        links: cola.Link3D[];
        preferredLinkLength: number;
    }): void;
    export function flowLayout(params: {
        iterations: number;
        nodes: LayoutNode[];
        links: LayoutLink[];
        preferredLinkLength: number;
    }): void;
    export function applyForceLayout(graph: GraphModel): void;
    export function applyRandomLayout(graph: GraphModel, maxDist?: number): void;
    export function applyForceLayout3d(graph: GraphModel, iterations?: number, linkLength?: number): void;
}

declare module 'l3-graph/l3Graph/utils/colorUtils' {
    export function getColorByTypes(strings: string[]): string;
    export function rgbToHex(r: number, g: number, b: number): string;
    /**
        * https://gist.github.com/eyecatchup/9536706
        */
    export function HSVtoRGB(h: number, s: number, v: number): {
            r: number;
            g: number;
            b: number;
    };
    /**
        * Calculate a 32 bit FNV-1a hash
        * https://gist.github.com/vaiorabbit/5657561
        */
    export function hashFnv32a(str: string, seed?: number): number;
}

declare module 'l3-graph/l3Graph/models/diagramModel' {
    import { Element, GraphModel } from 'l3-graph/l3Graph/models/graphModel';
    import { Subscribable } from 'l3-graph/l3Graph/utils/subscribeable';
    import { Node } from 'l3-graph/l3Graph/models/node';
    import { Link } from 'l3-graph/l3Graph/models/link';
    import { Widget } from 'l3-graph/l3Graph/models/widget';
    import { WidgetsModel } from 'l3-graph/l3Graph/models/widgetsModel';
    export interface DiagramModelEvents {
        'syncupdate': {
            graphEvents: Map<string, Element>;
            widgetEvents: Map<string, Widget>;
        };
        'change:selection': Set<Element>;
    }
    export class DiagramModel extends Subscribable<DiagramModelEvents> {
        graph: GraphModel;
        widgets: WidgetsModel;
        constructor();
        selection: Set<Element>;
        readonly nodes: Map<string, Node>;
        readonly links: Map<string, Link>;
        addElements(elements: Element[]): void;
        removeElements(elements: Element[]): void;
        removeNodesByIds(nodeIds: string[]): void;
        removeLinksByIds(linkIds: string[]): void;
        updateElements(elements: Element[]): void;
        performSyncUpdate: () => void;
    }
}

declare module 'l3-graph/l3Graph/models/primitives' {
    export interface Vector3D {
        x: number;
        y: number;
        z: number;
    }
    export interface Vector2D {
        x: number;
        y: number;
    }
    export enum Object3dKind {
        Mesh = "mesh",
        Line = "line",
    }
    export type Polygon3d = [Vector3D, Vector3D, Vector3D];
    export interface Mesh {
        type: Object3dKind.Mesh;
        polygons: Polygon3d[];
    }
    export interface Line {
        type: Object3dKind.Line;
        points: Vector3D[];
    }
}

declare module 'l3-graph/l3Graph/views/graphView' {
    import * as THREE from 'three';
    import { GraphModel, Element } from 'l3-graph/l3Graph/models/graphModel';
    import { DiagramElementView } from 'l3-graph/l3Graph/views/diagramElementView';
    import { NodeTemplateProvider, LinkTemplateProvider } from 'l3-graph/l3Graph/templates';
    export interface GraphViewProps {
        graphModel: GraphModel;
        scene: THREE.Scene;
        nodeTemplateProvider?: NodeTemplateProvider;
        linkTemplateProvider?: LinkTemplateProvider;
        simpleLinks?: boolean;
    }
    export class GraphView {
        camera: THREE.PerspectiveCamera;
        scene: THREE.Scene;
        views: Map<string, DiagramElementView<Element>>;
        renderer: THREE.WebGLRenderer;
        overlayRenderer: THREE.CSS3DRenderer;
        graphModel: GraphModel;
        meshHtmlContainer: HTMLElement;
        overlayHtmlContainer: HTMLElement;
        constructor(props: GraphViewProps);
        addElementView(element: Element): void;
        removeElementView(element: Element): void;
        update(specificIds: string[]): void;
    }
}

declare module 'l3-graph/l3Graph/views/widgetsView' {
    import * as THREE from 'three';
    import { DiagramElementView } from 'l3-graph/l3Graph/views/diagramElementView';
    import { WidgetsModel } from 'l3-graph/l3Graph/models/widgetsModel';
    export interface WidgetsViewProps {
        widgetsModel: WidgetsModel;
        scene: THREE.Scene;
    }
    export class WidgetsView {
        camera: THREE.PerspectiveCamera;
        scene: THREE.Scene;
        views: Map<string, DiagramElementView<any>>;
        renderer: THREE.WebGLRenderer;
        overlayRenderer: THREE.CSS3DRenderer;
        widgetsModel: WidgetsModel;
        meshHtmlContainer: HTMLElement;
        overlayHtmlContainer: HTMLElement;
        constructor(props: WidgetsViewProps);
        update(specificIds?: string[]): void;
    }
}

declare module 'l3-graph/l3Graph/templates/defaultLinkTemplate' {
    import { LinkViewTemplate, LinkTemplateProvider } from 'l3-graph/l3Graph/templates';
    export const DEFAULT_LINK_TEMPLATE: LinkViewTemplate;
    export const DEFAULT_LINK_TEMPLATE_PROVIDER: LinkTemplateProvider;
}

declare module 'l3-graph/l3Graph/templates/defaultNodeTemplate' {
    import { NodeViewTemplate, NodeTemplateProvider } from 'l3-graph/l3Graph/templates';
    export const DEFAULT_NODE_TEMPLATE: NodeViewTemplate<{
        label: string;
    }>;
    export const DEFAULT_NODE_TEMPLATE_PROVIDER: NodeTemplateProvider;
}

declare module 'l3-graph/l3Graph/templates/defaultOverlay' {
    import * as React from 'react';
    export class DefaultNodeOverlay extends React.Component<{
        label: string;
    }> {
        render(): JSX.Element;
    }
    export function createContextProvider(context: any): React.ComponentClass;
}

declare module 'l3-graph/l3Graph/models/graphModel' {
    import { Node } from 'l3-graph/l3Graph/models/node';
    import { Link } from 'l3-graph/l3Graph/models/link';
    import { Subscribable } from 'l3-graph/l3Graph/utils/subscribeable';
    export type Element = Node | Link;
    export function isNode(element: Element): element is Node;
    export function isLink(element: Element): element is Link;
    export interface GraphModelEvents {
        'add:elements': Element[];
        'remove:elements': Element[];
        'change:element': Element;
        'refresh:element': Element;
    }
    export class GraphModel extends Subscribable<GraphModelEvents> {
        nodes: Map<string, Node>;
        links: Map<string, Link>;
        fullUpdateList: Set<string>;
        getElementById(id: string): Element;
        addElements(elements: Element[]): void;
        updateElements(elements: Element[]): void;
        performNodeUpdate(node: Node): void;
        performLinkUpdate(link: Link): void;
        removeNodesByIds(nodeIds: string[]): void;
        removeLinksByIds(linkIds: string[]): void;
        removeElements(elements: Element[]): void;
    }
}

declare module 'l3-graph/l3Graph/models/widget' {
    import { Vector3D } from 'l3-graph/l3Graph/models/primitives';
    import { Subscribable } from 'l3-graph/l3Graph/utils/subscribeable';
    export const DEFAULT_SELECTION_TYPE_ID = "o3d-selection";
    export const DEFAULT_NODE_SIZE: Vector3D;
    export interface WidgetEvents {
        'widget:update': any;
    }
    export interface Widget<events extends WidgetEvents = WidgetEvents> extends Subscribable<events> {
        readonly widgetId: string;
    }
}

declare module 'l3-graph/l3Graph/models/widgetsModel' {
    import { Subscribable } from 'l3-graph/l3Graph/utils/subscribeable';
    import { Widget } from 'l3-graph/l3Graph/models/widget';
    export interface WidgetsModelEvents {
        'add:widget': Widget;
        'remove:widget': Widget;
        'widget:update': Widget;
    }
    export class WidgetsModel extends Subscribable<WidgetsModelEvents> {
        widgets: Map<string, Widget>;
        registerWidget(widget: Widget): void;
        removeWidget(widget: Widget): void;
        performUpdate(widget: Widget): void;
    }
}

declare module 'l3-graph/l3Graph/views/diagramElementView' {
    import * as THREE from 'three';
    export interface DiagramElementView<Model, State = any> {
        model: Model;
        readonly mesh: THREE.Object3D | null;
        readonly overlay: THREE.CSS3DObject | null;
        getBoundingBox(): THREE.Box3;
        update(state?: State): void;
    }
}

